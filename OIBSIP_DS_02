import pandas as pd

# For demonstration, let's assume we have a CSV file with unemployment data
# You can replace 'unemployment_data.csv' with the path to your actual data file
data = pd.read_csv('unemployment_data.csv')

# Display the first few rows of the dataset
print(data.head())
# Check for missing values
print(data.isnull().sum())

# Fill or drop missing values
data = data.dropna()  # or data.fillna(method='ffill')

# Convert date columns to datetime format if needed
data['date'] = pd.to_datetime(data['date'])

# Display summary statistics
print(data.describe())
import matplotlib.pyplot as plt

# Plot the unemployment rate over time
plt.figure(figsize=(12, 6))
plt.plot(data['date'], data['unemployment_rate'], label='Unemployment Rate')
plt.xlabel('Date')
plt.ylabel('Unemployment Rate (%)')
plt.title('Unemployment Rate Over Time')
plt.legend()
plt.show()

# Calculate and plot year-over-year changes if applicable
data['year'] = data['date'].dt.year
data['month'] = data['date'].dt.month
monthly_avg = data.groupby(['year', 'month'])['unemployment_rate'].mean().unstack()

plt.figure(figsize=(12, 6))
plt.plot(monthly_avg.T)
plt.xlabel('Month')
plt.ylabel('Unemployment Rate (%)')
plt.title('Monthly Average Unemployment Rate')
plt.legend(monthly_avg.index, title='Year')
plt.show()
# Calculate the average unemployment rate before and during COVID-19
pre_covid = data[data['date'] < '2020-03-01']
post_covid = data[data['date'] >= '2020-03-01']

avg_pre_covid = pre_covid['unemployment_rate'].mean()
avg_post_covid = post_covid['unemployment_rate'].mean()

print(f'Average Unemployment Rate before COVID-19: {avg_pre_covid:.2f}%')
print(f'Average Unemployment Rate during COVID-19: {avg_post_covid:.2f}%')

# Perform a t-test to see if the difference is statistically significant
from scipy.stats import ttest_ind

t_stat, p_value = ttest_ind(pre_covid['unemployment_rate'], post_covid['unemployment_rate'])

print(f'T-test statistic: {t_stat:.2f}, P-value: {p_value:.4f}')
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Prepare the data for modeling
data['timestamp'] = data['date'].map(pd.Timestamp.timestamp)
X = data[['timestamp']]
y = data['unemployment_rate']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse:.2f}')

# Plot the actual vs predicted unemployment rates
plt.figure(figsize=(12, 6))
plt.plot(data['date'], data['unemployment_rate'], label='Actual')
plt.scatter(X_test['timestamp'].map(pd.to_datetime), y_pred, color='red', label='Predicted')
plt.xlabel('Date')
plt.ylabel('Unemployment Rate (%)')
plt.title('Actual vs Predicted Unemployment Rate')
plt.legend()
plt.show()
