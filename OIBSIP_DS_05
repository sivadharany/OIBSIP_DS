import pandas as pd

# Load the dataset (assuming you have a CSV file with relevant data)
# Replace 'sales_data.csv' with the path to your dataset
data = pd.read_csv('sales_data.csv')

# Display the first few rows of the dataset
print(data.head())
# Check for missing values
print(data.isnull().sum())

# Fill or drop missing values
data = data.dropna()  # or data.fillna(method='ffill')

# Convert date columns to datetime format if needed
if 'date' in data.columns:
    data['date'] = pd.to_datetime(data['date'])

# Encode categorical variables
# For example, if 'platform' is a categorical variable
data = pd.get_dummies(data, columns=['platform', 'segment'], drop_first=True)

# Display summary statistics
print(data.describe())
import matplotlib.pyplot as plt
import seaborn as sns

# Plot the distribution of sales
plt.figure(figsize=(10, 6))
sns.histplot(data['sales'], bins=30, kde=True)
plt.title('Distribution of Sales')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.show()

# Plot relationships between features and sales
plt.figure(figsize=(10, 6))
sns.scatterplot(x=data['advertising_spend'], y=data['sales'])
plt.title('Advertising Spend vs Sales')
plt.xlabel('Advertising Spend')
# Selecting features and target variable
X = data.drop('sales', axis=1)
y = data['sales']

# Feature importance using a simple model like RandomForest
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor()
model.fit(X, y)

# Get feature importances
importances = model.feature_importances
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Initialize the model
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)

print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {
from sklearn.model_selection import GridSearchCV

# Define the parameter grid
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_features': ['auto', 'sqrt', 'log2'],
    'max_depth': [None, 10, 20, 30]
}

# Initialize GridSearchCV
grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, scoring='neg_mean_squared_error')

# Fit the model
grid_search.fit(X_train, y_train)

# Best parameters
best_params = grid_search.best_params_
print(f'Best Parameters: {best_params}')

# Evaluate the best model
best_model = grid_search.best_estimator_
y_pred_best = best_model.predict(X_test)
mae_best = mean_absolute_error(y_test, y_pred_best)
mse_best = mean_squared_error(y_test, y_pred_best)
rmse_best = mean_squared_error(y_test, y_pred_best, squared=False)
r2_best = r2_score(y_test, y_pred_best)

print(f'Mean Absolute Error with best parameters: {mae_best}')
print(f'Mean Squared Error with best parameters: {mse_best}')
print(f'Root Mean Squared Error with best parameters: {rmse_best}')
print(f'R-squared with best parameters: {r2_best}')
import joblib

# Save the model
joblib.dump(best_model, 'sales_prediction_model.pkl')
# Load the model
loaded_model = joblib.load('sales_prediction_model.pkl')

# Predict sales for new data
# Assume new_data is a DataFrame with the same structure as X
new_data = pd.DataFrame({
    'advertising_spend': [5000],
    'platform_Facebook': [1],
    'platform_Google': [0],
    'segment_A': [1],
    'segment_B': [0]
})

# Make predictions
predicted_sales = loaded_model.predict(new_data)
print(predicted_sales)
